const { getMeetingsNeedingReminders, markReminderSent } = require('./meeting-manager');

/**
 * Skicka p친minnelser f칬r kommande m칬ten
 * @param {Object} client - Mattermost-klient
 * @param {number} daysBeforeReminder - Antal dagar innan m칬tet f칬r p친minnelse
 */
async function sendMeetingReminders(client, daysBeforeReminder = 7) {
  try {
    console.log('Kontrollerar m칬ten som beh칬ver p친minnelser...');
    
    const meetingsNeedingReminders = getMeetingsNeedingReminders(daysBeforeReminder);
    console.log(`Hittade ${meetingsNeedingReminders.length} m칬ten som beh칬ver p친minnelser`);
    
    for (const meeting of meetingsNeedingReminders) {
      try {
        // Formatera datum och tid
        const [year, month, day] = meeting.date.split('-');
        const formattedDate = `${day}/${month}/${year}`;
        
        // Skapa p친minnelsemeddelande
        const reminderMessage = `## 游늰 P친minnelse: ${meeting.title}
        
**Datum:** ${formattedDate}
**Tid:** ${meeting.time}
**Plats:** ${meeting.location}

${meeting.description ? `**Beskrivning:** ${meeting.description}\n\n` : ''}
Detta 칛r en p친minnelse om ett kommande styrelsem칬te. V칛nligen bekr칛fta din n칛rvaro.`;
        
        // Skicka p친minnelse till kanalen
        await client.createPost({
          channel_id: meeting.channel_id,
          message: reminderMessage
        });
        
        console.log(`Skickade p친minnelse f칬r m칬te: ${meeting.title}`);
        
        // Markera m칬tet som p친mint
        markReminderSent(meeting.id);
      } catch (error) {
        console.error(`Fel vid skickande av p친minnelse f칬r m칬te ${meeting.id}:`, error);
      }
    }
  } catch (error) {
    console.error('Fel vid kontroll av m칬tesp친minnelser:', error);
  }
}

/**
 * Starta schemal칛ggaren f칬r p친minnelser
 * @param {Object} client - Mattermost-klient
 * @param {number} checkIntervalHours - Hur ofta kontrollera p친minnelser (i timmar)
 */
function startReminderScheduler(client, checkIntervalHours = 12) {
  console.log(`Startar schemal칛ggare f칬r m칬tesp친minnelser, kontrollerar var ${checkIntervalHours} timme`);
  
  // K칬r direkt vid start
  sendMeetingReminders(client);
  
  // Schemal칛gg regelbundna kontroller
  const intervalMs = checkIntervalHours * 60 * 60 * 1000;
  setInterval(() => sendMeetingReminders(client), intervalMs);
}

module.exports = {
  sendMeetingReminders,
  startReminderScheduler
};